generator client {
  provider = "prisma-client-js"
  output   = "../server/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  role   String?
  orders Order[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verifications")
}

model Products {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Int
  filePath    String?
  imagePath   String?
  isStock     Boolean @default(true)

  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  orders                Order[]
  downloadVerifications DownloadVerification[]

  @@index([name])
  @@map("products")
}

model Order {
  id    String @id @default(cuid())
  price Int

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  product    Products @relation(fields: [product_id], references: [id], onDelete: Restrict)
  product_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("orders")
}

model DownloadVerification {
  id         String   @id @default(cuid())
  expires    DateTime
  product    Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String
  created_at DateTime @default(now())
}
